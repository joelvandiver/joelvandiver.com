#!/bin/bash

cmd=$1

version="0.0.0"

shift

help() {
    echo "     ██╗██╗   ██╗   ██████╗ ██╗   ██╗███╗   ██╗"
    echo "     ██║██║   ██║   ██╔══██╗██║   ██║████╗  ██║"
    echo "     ██║██║   ██║   ██████╔╝██║   ██║██╔██╗ ██║"
    echo "██   ██║╚██╗ ██╔╝   ██╔══██╗██║   ██║██║╚██╗██║"
    echo "╚█████╔╝ ╚████╔╝    ██║  ██║╚██████╔╝██║ ╚████║"
    echo " ╚════╝   ╚═══╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝"
    echo "                                                                                      "
    echo " Commands:"
    echo "   install       Install the site"
    echo "   post          Generate a post"
    echo "   build         Build the site"
    echo "   start         Serve the site"
    echo "   deploy        Deploy the site"
    echo "   save          Save the site"
    echo "   readme        Generate the readme"
}

_run_complete()
{
    local cur prev opts
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    opts="install post build start deploy save readme"

    if [[ ${cur} == * ]] ; then
        COMPREPLY=( $(compgen -W "${opts}"  -- ${cur}) )
        return 0
    fi
}

install() {
    if ! command -v azcopy &> /dev/null
    then    
        echo "Installing azcopy"
        curl -L https://aka.ms/downloadazcopy-v10-linux -o azcopy.tar.gz
        if [[ ! -d /home/$USER/tmp/azcopy ]]; then mkdir -p /home/$USER/tmp/azcopy; fi
        sudo tar -xzf azcopy.tar.gz -C /home/$USER/tmp/azcopy/
        azcopy=$(find /home/$USER/tmp/azcopy/ -name azcopy -type f)
        chmod +x $azcopy
        sudo cp $azcopy /usr/local/bin/azcopy
    fi
    if [[ -d venv ]]; then rm -rf venv/; fi
    python -m venv venv
    . ./venv/bin/activate
    poetry install --no-root
}

load() {
    complete -F _run_complete run
    [[ -d venv ]] && . ./venv/bin/activate
    if [[ ! -f env ]]; then
        echo "The env file was not found.  Add the AZURE_BLOB_SAS_URL var."
    else
        . ./env
    fi
}

build() {
    mkdocs build --config-file site/mkdocs.yml --site-dir web
}

serve() {
    pid=$(lsof -ti:8000)
    if [[ pid ]]; then
        echo "Port 8000 is already in use."
        sudo kill -9 "$pid"
    fi
    mkdocs serve --config-file site/mkdocs.yml
}

deploy() {
    load
    if [[ ! -v AZURE_BLOB_SAS_URL ]]; then
        echo "The AZURE_BLOB_SAS_URL variable is not set."
        exit 1
    fi
    build
    # azcopy sync "site/web" "$AZURE_BLOB_SAS_URL" --from-to=LocalBlob --put-md5 --recursive --log-level=INFO
    azcopy sync "site/web" "$AZURE_BLOB_SAS_URL" --delete-destination=true --from-to=LocalBlob --put-md5 --recursive --log-level=INFO
}

save() {
    read -p "Commit Message: "  msg
    deploy
    git add .
    git commit -m "$msg"
    git push
}

readme() {
    cmd="run help"
    title="Run Help"

    html=help.html
    pdf=help.pdf

    # Install tools, if necessary.
    if ! command -v aha &> /dev/null
    then    
        echo "Installing aha"
        sudo apt install aha
    fi
    if ! command -v wkhtmltopdf &> /dev/null
    then    
        echo "Installing wkhtmltopdf"
        sudo apt install wkhtmltopdf
    fi

    # Generate the html from the command.
    script -qc "$cmd" /dev/null | aha --black --title "$title" > "$html"

    # Generate a pdf of the html file.
    wkhtmltopdf -s Letter "$html" "$pdf"
}

case $cmd in
    "install") install;;
    "post")
        _date=$(date +%Y-%m-%d)
        post="${1// /-}"
        echo "Generating Post: $_date-$post"
        file="$PWD/site/docs/blog/posts/$_date-$post.md"
        touch $file
        cat > $file <<EOF
---
title: $1
date: $_date
---

EOF
        code $file
        ;;
    "build") build;;
    "start") serve;;
    "deploy") deploy;;
    "save") save;;
    "readme") readme;;
    *) 
        load
        help;;
esac