{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Joel Vandiver's Blog","text":"<p>I intend to use this blog for learning.  I do not seek to teach for teaching's sake, but rather I teach to learn.  I have so much to unpack, so much to learn, and so much to get excited about!  And, I can't wait to dive in.   </p>"},{"location":"about/","title":"About","text":"<p>Hi, I'm Joel. I started coding in 2008 with JavaScript as a high school Math teacher.  I had been building a website (back in the Internet dark ages) for my students to learn from.  By this point, I had already flipped my classroom where students would learn from my online videos (see my original youtube account) and then they completed \"homework\" in the classroom with me to help as their \"tutor\".  </p> <p>The deeper I went with coding, the more successful I became at teaching.  I had gotten to the point where I started learning C++!  I figured, \"Eh, anyone who's serious about coding has to learn C++.\"  </p> <p>Then, I got the opportunity to work professionally in software engineering.  I started my career in C# and SQL SERVER.  Day after day, I would slog through raw SQL queries as I learned to express my thoughts with code.  Then, I quickly sought to automate some of my work through an ASP.NET MVC app written in C#. After a few years, I brought JavaScript back to my daily routine with AngularJS and jQuery.  </p> <p>Then, I had the opportunity to move into a position at a bigger company with a larger space to grow in.  I continued developing in C#, SQL SERVER, and JavaScript, but I quickly transitioned to using F# full-time.  </p> <p>I really love F#.  There's something about it's syntax that feels more natural as a mathematician.  I spent several years just hanging out with F# and SQL SERVER.</p> <p>But, then, in order to grow, I needed to move to a larger team with an even greater impact within the company.  Through this team, I've grafted in Python, TypeScript, ReactJS, NodeJS, PostgreSQL, and Docker (to name a few) into my development experience.  </p> <p>Now, I really love Python.  I was surprised to learn that Python supports type annotations and comprehension expressions.  Both of these features are critical for functional programming.</p> <p>My career has been a wild ride of constant learning, and I've got so much more to explore!</p>"},{"location":"daily/2023-12-10-Use-a-Run-Post/","title":"Use a Run Script","text":""},{"location":"daily/2023-12-10-Use-a-Run-Post/#why-run","title":"Why <code>run</code>?","text":"<p>This <code>run</code> script was inspired by <code>npm run</code> scripts.  Moving your development flow to a run script allows you to setup environments, install, or anything else you need to develop your project.  The <code>run</code> script also allows your to consolidate your scripts into a single script.  You'd likely have an <code>install.sh</code> script, another for <code>test.sh</code>, etc.</p>"},{"location":"daily/2023-12-10-Use-a-Run-Post/#how-to-run","title":"How to <code>run</code>?","text":""},{"location":"daily/2023-12-10-Use-a-Run-Post/#add-current-directory-to-path","title":"Add Current Directory to <code>$PATH</code>","text":"<p>To start, add the current directory to your <code>$PATH</code>.  I prefer to run scripts by name rather than with the relative path prefix (<code>./</code>).  So, I usually use <code>run</code> rather than <code>./run</code>.</p> <pre><code># Add to `~/.bashrc`\nexport PATH=\"$PATH:.\"\n</code></pre>"},{"location":"daily/2023-12-10-Use-a-Run-Post/#add-the-script","title":"Add the Script","text":"<p>Setup a run script for quick development.</p> <p>Create the run script file:</p> <pre><code>$ touch run\n</code></pre> <p>Add the run script:</p> <pre><code>#!/bin/bash\n\nhelp() {\n    echo \"App\"\n    echo \"=========================\"\n    echo \"start     Run the application\"\n    echo \"test      Test the application\"\n}\n\n# Setup Tab Complete\n_tab_complete() {\n    local cur prev opts\n    opts=\"start test\"\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n    COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n    return 0\n}\n\ncomplete -F _tab_complete run\n\ncmd=$1\n\n# Remove the first argument (shift left)\nshift\n\ncase $cmd in\n    \"start\")\n        echo \"TODO: Add [start]\"\n        # Use \"$@\" to pass all remaining arguments.\n        ;;\n    \"test\")\n        echo \"TODO: Add [test]\"\n        # Use \"$@\" to pass all remaining arguments.\n        ;;\n    *)\n        help\n        ;;\nesac\n</code></pre> <p>Example run:</p> <pre><code>$ . run # Source the run script to add tab complete.\nApp\n=========================\nstart     Run the application\ntest      Test the application\n$ run start\nTODO: Add [start]\n</code></pre>"}]}